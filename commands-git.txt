comandos de git aprendidos en esta clase:

git init: lo usamos para determinar la carpeta en la que vamos a trabajar.

git status: lo usamos para saber si tenemos un archivo añadido o borrado en nuestro proyecto, para saber en la rama en la que estamos y si tenemos commits.

git add: es para añadir un archivo a nuestra rama seguidamente ponemos entre comillas el nombre de nuestro archivo o poner un punto para añadir todos los archios de nuestra carpeta.

git rm: lo usamos para borrar un archivo que hayamos añadido, para eliminarlo por completo de nuestra rama usamosgit rm --cached.

git commit: se usa para añadir un commit a nuestra rama, también podemos ponerle un -m seguidamente ponemos entre comillas nuestro ensaje.

git config: muestra configuraciones de git también podemos usar –list para mostrar la configuración por defecto de nuestro git y si añadimos --show-origin inhales nos muestra las configuraciones guardadas y su ubicación.

git config --global user.name: cambia de manera global el nombre del usuario, seguidamente ponemos entre comillas nuestro nombre.

git config --global user.email: cambia de manera global el email del usuario, seguidamente ponemos entre comillas nuestro nombre.

git show : muestra los cambios hechos en el archivo , es muy bueno para ver lo que cambiamosz

git log: se usa para ver la historia de nuestros archivos, los commits, el usuario que lo cambió, cuando se realizaron los cambios etc. seguidamente ponemos el nombre de nuestro archivo.

    git log --oneline - Te muestra el id commit y el título del commit.
    git log --decorate- Te muestra donde se encuentra el head point en el log.
    git log --stat - Explica el número de líneas que se cambiaron brevemente.
    git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
    git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
    git log --graph --oneline --decorate y
    git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
    git log -3 - Limitamos el número de commits.
    git log --after=“2018-1-2” ,
    git log --after=“today” y
    git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
    git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
    git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
    git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
    git log – index.html- Busca los commits en un archivo en específico.
    git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
    git log > log.txt - guardar los logs en un archivo txt

git diff : Con esto podemos lograr una comparación de versiones usando el codigo del commit , podemos verlo en git log

// Viajes en el tiempo 
    git reset : este comando + el codigo del commit podemos volver a esa version. git reset 1h23iu12h --hard(borra todo lo que paso hasta antes de ese commit) --soft (deja en cache la ultima version que aun tenemos) preferible usar --hard para borrar en brusco tdo solo en casos necesarios

    git checkout : con esto podemos volver a ver un archivo en su primera version o segunda o la que quieras git checkout baa326bfdfceabbc714c381b664b18cff41c26bb historia.txt esto suplanta ala ultima version de dicho archivo por la version que estemos viendo en ese momento.

    La ventaje de checkout es que podemos ver , volver y pasearnos por todos las versiones del proyecto a comparación de reset 

    para volver a ver la ultima version dejando de ver la version anterior , solo debemos hacer  git checkout master historia.txt . pero si queremos suplantarlo por una version anterior y modificada hacemos los pasos comunes git add . etc.. y eso suplantara por ejepmlo la version 3 con la ultima que era la 10 (se usa siempre y cuando sea un caso necesario)


// Creando nuevas ramas
    git brancha new_branch
    git checkout new_branch (para cambiar de ramas)

    //fusion de ramas